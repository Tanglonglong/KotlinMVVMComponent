if (isModuleLibrary.toBoolean()) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'


android {
    compileSdk rootProject.ext.android.compileSdkVersion
    defaultConfig {
        minSdk rootProject.ext.android.minSdkVersion
        targetSdk rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        consumerProguardFiles 'consumer-rules.pro'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "VERSION_NAME", "\"${rootProject.ext.android.versionName}\""
        buildConfigField "int", "VERSION_CODE", "${rootProject.ext.android.versionCode}"
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.name)
            }
        }

    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main{
            //jni库统一放在libs目录下
//            jniLibs.srcDir = ['libs']
            if (isModuleLibrary.toBoolean()){
                //合并到宿主中
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources{
                    //正式版本时.剔除debug文件夹下的所有调式文件
                    exclude 'src/debug/*'
                }

            }
            else {
                //单独运行
                manifest.srcFile 'src/main/aloneApp/AndroidManifest.xml'
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        buildConfig = true
    }
    buildFeatures {
        viewBinding true
    }
    buildFeatures {
        dataBinding = true
    }
}
dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.androidx.activity
    implementation libs.androidx.constraintlayout
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest

    // 要与compiler匹配使用，均使用最新版可以保证兼容
    api 'com.alibaba:arouter-api:1.5.2'
    // java和kotlin不一样，关键修改点java用的 annotationProcessor 'com.alibaba:arouter-compiler:1.5.2'
    //kotlin还要apply plugin: 'kotlin-kapt'引入插件，直接用java的就一直生成不了路由，动态注入也有问题
    kapt 'com.alibaba:arouter-compiler:1.5.2'
    // 基础依赖包，必须要依赖
    api 'com.geyifeng.immersionbar:immersionbar:3.2.2'
// kotlin扩展（可选）
    api 'com.geyifeng.immersionbar:immersionbar-ktx:3.2.2'

    api libs.refresh.layout.kernel      //核心必须依赖
    api libs.refresh.header.classics    //经典刷新头
    api libs.scwang90.refresh.header.radar       //雷达刷新头
    api libs.scwang90.refresh.header.falsify     //虚拟刷新头
    api libs.scwang90.refresh.header.material    //谷歌刷新头
    api libs.scwang90.refresh.header.two.level   //二级刷新头
    api libs.scwang90.refresh.footer.ball        //球脉冲加载
    api libs.scwang90.refresh.footer.classics    //经典加载
    api libs.glide
    api project(':library-base')
    api project(':library-common')
    api project(':library-data')


}
